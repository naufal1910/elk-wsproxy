input {
  file {
    id                => "hb-ws-file"
    path              => ["/hb-ws-logs/ELKLog.log"]
    start_position    => "beginning"
    sincedb_path      => "/usr/share/logstash/data/sincedb-hb-ws"
    #mode              => "read"
    codec             => plain { charset => "UTF-8" }
    tags              => ["hb-ws"]
  }
}

filter {
  # Sample: 07:47:11.725 INFO  :: [ELKUtils.java:178] :: ELKLog:: { ...json... }
grok {
  match => {
    "message" => [
      '^(?<log_time>\d{2}:\d{2}:\d{2}\.\d{3})\s+(?<log.level>[A-Z]+)\s+::\s+\[(?<java.class>[^:\]]+):(?<java.line>\d+)\]\s+::\s+ELKLog::\s+(?<json_raw>\{.*)$'
    ]
  }
  tag_on_failure => ["_hbws_grok_failed"]
}


#   grok {
#     match => {
#       "message" => [
#         "^%{TIME:log_time}\s+%{LOGLEVEL:log.level}\s+:: \[%{DATA:java.class}:%{INT:java.line}\]\s+::\s+ELKLog::\s+%{GREEDYDATA:json_raw}$",
#         "^%{TIME:log_time}\s+%{LOGLEVEL:log.level}.*ELKLog::\s+%{GREEDYDATA:json_raw}$"
#       ]
#     }
#     tag_on_failure => ["_hbws_grok_failed"]
#   }

# Keep ONLY INFO
if [log][level] {
  if [log][level] != "INFO" { drop {} }
} else {
  # fallback: if we can't parse level yet, drop only if it clearly isn't INFO
  if !( [message] =~ /\sINFO\s+::/ ) { drop {} }
}


#   if ![log][level] or [log][level] != "INFO" {
#     drop { }
#   }

  # Parse JSON payload after 'ELKLog::'
  if [json_raw] {
    json {
      source => "json_raw"
      target => "payload"
      tag_on_failure => ["_hbws_json_failed"]
    }
  }

  # Build @timestamp from HH:mm:ss.SSS (assumes today's date, Asia/Jakarta)
  if [log_time] {
    date {
      match    => ["log_time", "HH:mm:ss.SSS"]
      timezone => "Asia/Jakarta"
      target   => "@timestamp"
    }
  }

  # Derive convenient fields
  mutate {
    add_field => {
      "event.module"    => "hb-ws"
      "event.dataset"   => "hb.ws.elklog"
      "service.name"    => "%{[payload][pgm-name]}"
      "event.action"    => "%{[payload][func-name]}"
      "hb.message_type" => "%{[payload][message-type]}"
      "trace.id"        => "%{[payload][trace-id]}"
      "host.name"       => "%{[payload][server-name]}"
    }
    convert => {
      "java.line" => "integer"
      "[payload][elapsed]" => "integer"
    }
    remove_field => ["json_raw","log_time","@version"]
  }
}

output {
  elasticsearch {
    hosts => ["http://es-wsproxy:9200"]
    index => "hb-ws-%{+YYYY.MM.dd}"
    # user => "elastic"
    # password => "changeme"
  }
  stdout { codec => rubydebug }   # enable if you want to see parsed docs in logs
}
